import { PureComponent, ComponentType } from 'react';
import { SessionControlModalProps } from './SessionControlModal';
import '../SessionControl.css';
interface AuthenticatedSectionControlProps extends Omit<SessionControlModalProps, 'remainingTime' | 'isOpen' | 'progressPercent' | 'onLogoutClick' | 'onContinueClick'> {
    /**Inictivity timeout in seconds. */
    inactivityTimeout: number;
    /**Inictivity timeout when modal is open in seconds. */
    modalInactivityTimeout: number;
    /**Key do check existence in local storage. */
    storageTokenKey?: string;
    /**If should warn timeout in document title. */
    showDocumentTitleAlert?: boolean;
    /**The text displayed as document title case showDocumentTitleAlert is true. */
    documentTitleAlertText?: string;
    /**The time in miliseconds to debounce token changes.  */
    tokenChangeDebounceTime?: number;
    /**The time in miliseconds to throttle user activity. */
    userActivityThrottleTime?: number;
    /**Debug mode. */
    debug?: boolean;
    /**Callback to be called when timer ends, logout click or token is removed from local storage. */
    onLogout?: (logoutType: LogoutTypes, local?: boolean) => void | Promise<any>;
    /**Callback to be called when inactivy ends. */
    onInactivityTimeout?: () => void | Promise<any>;
    /**Callback to be called when modal inactivy ends. */
    onInactivityModalTimeout?: () => void | Promise<any>;
    /**Modal element to render. */
    renderModal?: ComponentType<SessionControlModalProps>;
    /**If the component is disabled. */
    disabled: boolean;
}
export declare enum LogoutTypes {
    button = "button",
    inactivity = "inactivity",
    lostToken = "lostToken"
}
interface State {
    isModalOpen: boolean;
    modalTimer?: number;
}
export default class AuthenticatedSessionControl extends PureComponent<AuthenticatedSectionControlProps, State> {
    static defaultProps: Partial<AuthenticatedSectionControlProps>;
    _isMounted: boolean;
    originalDocumentTitle: string;
    inactivityTimeoutRef: any;
    modalTimerIntervalRef: any;
    throttledHandleUserActivity: any;
    debouncedHandleStorageKeyChange: any;
    constructor(props: AuthenticatedSectionControlProps);
    componentDidMount(): void;
    componentDidUpdate(prevProps: AuthenticatedSectionControlProps): void;
    componentWillUnmount(): void;
    load(): void;
    debug(description: string): void;
    initAcitivityListeners(): void;
    removeActivityListeners(): void;
    clearRefs(): void;
    resetDocumentTitle(): void;
    logout(logoutType: LogoutTypes, isFromOtherTab?: boolean): void;
    getProgressWidth(): string;
    verifyLastActivityTime(): boolean;
    handleVisibilityChange(): void;
    handleUserActivity(updateLastActivity?: boolean): void;
    handleInactivityTimeout(): void;
    handleModalTimer(): void;
    handleStorageChange(event: any): void;
    handleStorageKeyChange(event: any): void;
    handleModalLogoutClick(): void;
    handleModalContinueClick(): void;
    render(): JSX.Element;
}
export {};
