import { PureComponent } from 'react';
import '../SessionControl.css';
interface SectionControlProps {
    /**Inictivity timeout in seconds. */
    inactivityTimeout: number;
    /**Inictivity timeout when modal is open in seconds. */
    modalInactivityTimeout: number;
    /**Callback to be called when timer ends, logout click or token is removed from local storage. */
    onLogout?: (logoutType: LogoutTypes) => void;
    /**Callback to be called when token is added to local storage. */
    onLogin?: () => void;
    /**Key do check existence in local storage. */
    storageTokenKey?: string;
    /**Title to display in modal header */
    title?: string;
    /**Message to display in modal. */
    message?: string;
    /**Message to display before time count in modal. */
    timerMessage?: string;
    /**Text to display in continue button. */
    continueButtonText?: string;
    /**Logout modal button text. */
    logoutButtonText?: string;
    /**If should display document title alert. */
    showDocumentTitleAlert?: boolean;
    /**The text displayed as document title case showDocumentTitleAlert is true. */
    documentTitleAlertText?: string;
}
export declare enum LogoutTypes {
    button = "button",
    inactivity = "inactivity",
    lostToken = "lostToken"
}
interface State {
    isModalOpen: boolean;
    modalTotalTimer: number;
    modalTimer?: number;
}
export default class SessionControl extends PureComponent<SectionControlProps, State> {
    static defaultProps: Partial<SectionControlProps>;
    originalDocumentTitle: string;
    inactivityTimeoutRef: any;
    modalTimerIntervalRef: any;
    throttledHandleUserActivity: any;
    debouncedHandleStorageKeyChange: any;
    constructor(props: SectionControlProps);
    componentDidMount(): void;
    componentWillUnmount(): void;
    initAcitivityListeners(): void;
    removeActivityListeners(): void;
    clearRefs(): void;
    logout(logoutType: LogoutTypes): void;
    getProgressWidth(): string;
    handleUserActivity(updateLastActivity?: boolean): void;
    handleInactivityTimeout(): void;
    handleModalTimer(): void;
    handleStorageChange(event: any): void;
    handleStorageKeyChange(event: any): void;
    handleModalLogoutClick(): void;
    handleModalContinueClick(): void;
    render(): JSX.Element;
}
export {};
