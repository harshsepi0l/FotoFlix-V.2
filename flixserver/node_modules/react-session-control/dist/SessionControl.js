"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const SessionControlModal_1 = __importDefault(require("./SessionControlModal"));
const utils_1 = require("./utils");
require("../SessionControl.css");
const LAST_ACITIVTY_TIME_STORAGE_KEY = 'sc-last-activity-time';
var LogoutTypes;
(function (LogoutTypes) {
    LogoutTypes["button"] = "button";
    LogoutTypes["inactivity"] = "inactivity";
    LogoutTypes["lostToken"] = "lostToken";
})(LogoutTypes = exports.LogoutTypes || (exports.LogoutTypes = {}));
class SessionControl extends react_1.PureComponent {
    constructor(props) {
        super(props);
        this.originalDocumentTitle = null;
        this.inactivityTimeoutRef = null;
        this.modalTimerIntervalRef = null;
        const { modalInactivityTimeout } = props;
        this.state = {
            isModalOpen: false,
            modalTotalTimer: modalInactivityTimeout,
            modalTimer: modalInactivityTimeout,
        };
        this.handleInactivityTimeout = this.handleInactivityTimeout.bind(this);
        this.handleModalTimer = this.handleModalTimer.bind(this);
        this.handleModalLogoutClick = this.handleModalLogoutClick.bind(this);
        this.handleModalContinueClick = this.handleModalContinueClick.bind(this);
        this.handleStorageChange = this.handleStorageChange.bind(this);
        this.handleStorageKeyChange = this.handleStorageKeyChange.bind(this);
        this.throttledHandleUserActivity = utils_1.throttle(this.handleUserActivity.bind(this, true), 500);
        this.debouncedHandleStorageKeyChange = utils_1.debounce(this.handleStorageKeyChange, 500);
        this.originalDocumentTitle = document.title;
    }
    componentDidMount() {
        const { storageTokenKey } = this.props;
        if (storageTokenKey) {
            window.addEventListener('storage', this.handleStorageChange, true);
            //Check if is authenticated to start listeners.
            if (localStorage.getItem(storageTokenKey) != null) {
                this.initAcitivityListeners();
            }
        }
        else {
            this.initAcitivityListeners();
        }
        this.handleUserActivity();
    }
    componentWillUnmount() {
        const { storageTokenKey } = this.props;
        if (storageTokenKey) {
            window.removeEventListener('storage', this.handleStorageChange);
        }
        this.removeActivityListeners();
        this.clearRefs();
    }
    initAcitivityListeners() {
        document.addEventListener('mousemove', this.throttledHandleUserActivity);
        document.addEventListener('keypress', this.throttledHandleUserActivity);
    }
    removeActivityListeners() {
        document.removeEventListener('mousemove', this.throttledHandleUserActivity);
        document.removeEventListener('keypress', this.throttledHandleUserActivity);
    }
    clearRefs() {
        clearInterval(this.inactivityTimeoutRef);
        clearInterval(this.modalTimerIntervalRef);
    }
    logout(logoutType) {
        this.removeActivityListeners();
        this.clearRefs();
        const { showDocumentTitleAlert, onLogout } = this.props;
        if (showDocumentTitleAlert) {
            document.title = this.originalDocumentTitle;
        }
        this.setState({ isModalOpen: false }, () => onLogout && onLogout(logoutType));
    }
    getProgressWidth() {
        const { modalInactivityTimeout } = this.props;
        const { modalTimer } = this.state;
        return `${modalTimer / modalInactivityTimeout * 100}%`;
    }
    handleUserActivity(updateLastActivity = false) {
        const { isModalOpen } = this.state;
        const { inactivityTimeout } = this.props;
        if (updateLastActivity) {
            localStorage.setItem(LAST_ACITIVTY_TIME_STORAGE_KEY, Date.now().toString());
        }
        if (isModalOpen) {
            clearInterval(this.modalTimerIntervalRef);
            const { modalInactivityTimeout } = this.props;
            this.setState({
                modalTimer: modalInactivityTimeout
            }, () => {
                this.modalTimerIntervalRef = setInterval(this.handleModalTimer, 1000);
            });
        }
        else {
            clearTimeout(this.inactivityTimeoutRef);
            this.inactivityTimeoutRef = setTimeout(this.handleInactivityTimeout, inactivityTimeout * 1000);
        }
    }
    handleInactivityTimeout() {
        const lastActivity = localStorage.getItem(LAST_ACITIVTY_TIME_STORAGE_KEY);
        const { inactivityTimeout } = this.props;
        if (!lastActivity || Date.now() >= (Number(lastActivity) + (inactivityTimeout * 1000))) {
            this.setState({ isModalOpen: true }, () => {
                this.handleUserActivity();
            });
        }
        else {
            this.handleUserActivity();
        }
    }
    handleModalTimer() {
        const { showDocumentTitleAlert, documentTitleAlertText } = this.props;
        const { modalTimer } = this.state;
        if (modalTimer === 0) {
            this.logout(LogoutTypes.inactivity);
        }
        else {
            if (showDocumentTitleAlert) {
                if (document.title === this.originalDocumentTitle) {
                    document.title = documentTitleAlertText;
                }
                else {
                    document.title = this.originalDocumentTitle;
                }
            }
            this.setState({ modalTimer: modalTimer - 1 });
        }
    }
    handleStorageChange(event) {
        const { storageTokenKey } = this.props;
        console.log('event :', event);
        if (event.key === LAST_ACITIVTY_TIME_STORAGE_KEY) {
            this.setState({ isModalOpen: false }, () => {
                clearInterval(this.modalTimerIntervalRef);
                this.handleUserActivity();
            });
        }
        else {
            this.handleUserActivity();
        }
        if (event.key === storageTokenKey || event.key === null) {
            //Using debounce here to handle multiple changes.
            this.debouncedHandleStorageKeyChange(event);
        }
    }
    handleStorageKeyChange(event) {
        const { onLogin } = this.props;
        const { oldValue, newValue } = event;
        if (oldValue == null && newValue != null) {
            onLogin && onLogin();
            this.initAcitivityListeners();
        }
        else if (newValue == null) {
            this.logout(LogoutTypes.lostToken);
        }
    }
    handleModalLogoutClick() {
        this.logout(LogoutTypes.button);
    }
    handleModalContinueClick() {
        const { showDocumentTitleAlert } = this.props;
        clearInterval(this.modalTimerIntervalRef);
        if (showDocumentTitleAlert) {
            document.title = this.originalDocumentTitle;
        }
        this.setState({ isModalOpen: false }, () => {
            this.handleUserActivity();
        });
    }
    render() {
        const { title, message, timerMessage, logoutButtonText, continueButtonText } = this.props;
        const { modalTimer, isModalOpen } = this.state;
        return (react_1.default.createElement(SessionControlModal_1.default, { isOpen: isModalOpen, title: title, message: message, timerMessage: timerMessage, logoutButtonText: logoutButtonText, continueButtonText: continueButtonText, remainingTime: modalTimer, progressPercent: this.getProgressWidth(), onContinueClick: this.handleModalContinueClick, onLogoutClick: this.handleModalLogoutClick }));
    }
}
exports.default = SessionControl;
SessionControl.defaultProps = {
    showDocumentTitleAlert: true,
    title: 'Inactivity alert',
    message: 'You have been inactive for a long time. Do you want to remain logged in?',
    continueButtonText: 'Continue',
    logoutButtonText: 'Logout',
    timerMessage: 'You will be disconnected in: ',
    documentTitleAlertText: 'INACTIVITY ALERT',
};
